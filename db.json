{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"a811bb73e014080e3ff01b87e91e547ddf7f8f56","modified":1622106283349},{"_id":"source/A-New-Page/index.md","hash":"76821cca35d60b95b2c92e54c55c6514ad0f5949","modified":1622086008138},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1622085665002},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1622085665003},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1622085665005},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1622085665006},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1622085665005},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1622085665006},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1622085665007},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1622085665006},{"_id":"themes/next/_config.yml","hash":"dd900aed129803a97a4ef07a6e4944a43dec0bb8","modified":1622106512481},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1622085665015},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1622085665040},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1622085665002},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1622085665003},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1622085665004},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1622085665004},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1622085665004},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1622085665004},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1622085665005},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1622085665005},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1622085665005},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1622085665005},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1622085665005},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1622085665007},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1622085665003},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1622085665008},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1622085665007},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1622085665009},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1622085665009},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1622085665009},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1622085665009},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1622085665009},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1622085665015},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1622085665015},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1622085665016},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1622085665016},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1622085665016},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1622085665016},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1622085665017},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1622085665017},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1622085665017},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1622085665017},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1622085665018},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1622085665018},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1622085665018},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1622085665018},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1622085665019},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1622085665019},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1622085665019},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1622085665019},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1622085665020},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1622085665020},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1622085665020},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1622085665020},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1622085665038},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1622085665021},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1622085665039},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1622085665039},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1622085665040},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1622085665039},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1622085665040},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1622085665045},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1622085665003},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1622085665004},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1622085665004},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1622085665004},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1622085665010},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1622085665010},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1622085665010},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1622085665011},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1622085665012},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1622085665011},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1622085665012},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1622085665012},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1622085665013},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1622085665013},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1622085665014},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1622085665015},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1622085665014},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1622085665021},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1622085665021},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1622085665021},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1622085665022},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1622085665022},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1622085665024},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1622085665025},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1622085665028},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1622085665028},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1622085665028},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1622085665029},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1622085665031},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1622085665031},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1622085665035},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1622085665033},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1622085665036},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1622085665036},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1622085665043},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1622085665040},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1622085665043},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1622085665043},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1622085665043},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1622085665044},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1622085665044},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1622085665044},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1622085665044},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1622085665045},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1622085665045},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1622085665045},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1622085665007},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1622085665046},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1622085665045},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1622085665046},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1622085665046},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1622085665046},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1622085665046},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1622085665047},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1622085665047},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1622085665047},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1622085665065},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1622085665072},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1622085665073},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1622085665073},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1622085665073},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1622085665074},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1622085665074},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1622085665074},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1622085665074},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1622085665075},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1622085665075},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1622085665075},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1622085665075},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1622085665076},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1622085665075},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1622085665076},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1622085665076},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1622085665076},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1622085665076},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1622085665077},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1622085665078},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1622085665022},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1622085665022},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1622085665023},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1622085665023},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1622085665023},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1622085665024},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1622085665023},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1622085665025},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1622085665025},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1622085665025},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1622085665026},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1622085665026},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1622085665026},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1622085665026},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1622085665027},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1622085665027},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1622085665027},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1622085665028},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1622085665029},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1622085665030},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1622085665031},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1622085665030},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1622085665031},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1622085665032},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1622085665032},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1622085665032},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1622085665033},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1622085665033},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1622085665034},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1622085665034},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1622085665034},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1622085665034},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1622085665034},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1622085665035},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1622085665035},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1622085665035},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1622085665035},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1622085665036},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1622085665036},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1622085665037},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1622085665037},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1622085665037},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1622085665037},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1622085665037},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1622085665038},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1622085665038},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1622085665038},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1622085665038},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1622085665041},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1622085665041},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1622085665041},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1622085665041},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1622085665042},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1622085665042},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1622085665042},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1622085665042},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1622085665042},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1622085665042},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1622085665043},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1622085665071},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1622085665071},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1622085665071},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1622085665072},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1622085665072},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1622085665077},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1622085665077},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1622085665080},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1622085665080},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1622085665066},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1622085665066},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1622085665066},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1622085665066},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1622085665067},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1622085665067},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1622085665068},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1622085665068},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1622085665068},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1622085665069},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1622085665069},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1622085665069},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1622085665070},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1622085665070},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1622085665070},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1622085665070},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1622085665071},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1622085665070},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1622085665048},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1622085665048},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1622085665048},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1622085665053},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1622085665058},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1622085665058},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1622085665060},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1622085665061},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1622085665061},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1622085665062},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1622085665062},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1622085665062},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1622085665063},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1622085665064},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1622085665079},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1622085665078},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1622085665048},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1622085665073},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1622085665048},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1622085665049},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1622085665049},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1622085665049},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1622085665050},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1622085665049},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1622085665050},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1622085665051},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1622085665051},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1622085665050},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1622085665051},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1622085665051},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1622085665052},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1622085665052},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1622085665052},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1622085665053},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1622085665053},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1622085665054},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1622085665054},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1622085665054},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1622085665055},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1622085665055},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1622085665055},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1622085665056},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1622085665056},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1622085665057},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1622085665057},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1622085665057},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1622085665057},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1622085665058},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1622085665058},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1622085665059},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1622085665059},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1622085665059},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1622085665059},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1622085665060},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1622085665059},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1622085665060},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1622085665060},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1622085665061},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1622085665061},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1622085665061},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1622085665062},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1622085665063},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1622085665063},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1622085665063},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1622085665064},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1622085665064},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1622085665064},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1622085665056},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1622085665063},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1622085665079},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1622085665079},{"_id":"public/A-New-Page/index.html","hash":"ebca4a6231b7a524fa46ac6a12fcb742700709bd","modified":1622088569762},{"_id":"public/2021/05/27/hello-world/index.html","hash":"9658044f0c8c0d3393fc17c95d015da7f25fc4c8","modified":1622100632346},{"_id":"public/archives/2021/index.html","hash":"e2349be6253b75689994689baaf8da13761f7023","modified":1622100632346},{"_id":"public/archives/index.html","hash":"4cb63578924e28492f4371c15aeb3691fe9f014e","modified":1622100632346},{"_id":"public/archives/2021/05/index.html","hash":"3ba12e5c7a3d938d7bbdb53a0f45ec4af038797f","modified":1622100632346},{"_id":"public/index.html","hash":"0d20d95db754a7de268bbadf7bdfecd396ff7a3a","modified":1622107970156},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1622087284605},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1622087284605},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1622087284605},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1622087284605},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1622087284605},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1622087284605},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1622087284605},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1622087284605},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1622087284605},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1622087284605},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1622087284605},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1622087284605},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1622087284605},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1622087284605},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1622087284605},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1622087284605},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1622087284605},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1622087284605},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1622087284605},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1622087284605},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1622087284605},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1622087284605},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1622087284605},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1622087284605},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1622087284605},{"_id":"public/css/main.css","hash":"ae90f6e4c2734378eacc3c097d5f7521cb1bb83c","modified":1622087284605},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1622087284605},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1622087284605},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1622087284605},{"_id":"source/_posts/Linux-task-struct-Scheduler.md","hash":"41e7edf29fd19503ce4ed92583e4e4bb9d7f6617","modified":1622117900977},{"_id":"public/2021/05/27/Linux-task-struct-Scheduler/index.html","hash":"b4d22f0a746deef31e449794c4e081dace1906e3","modified":1622100632346},{"_id":"public/categories/Linux/index.html","hash":"1d87231670b6671ba9e5974acf24f62620937c11","modified":1622100632346},{"_id":"public/tags/Scheduler/index.html","hash":"5d5faca102928309d096a4d5899af89f9cbe8eb4","modified":1622100632346},{"_id":"public/tags/Source-Code/index.html","hash":"2dcee8b7bf9d10a59fb732894784bdc883d5db0f","modified":1622100632346},{"_id":"source/categories/index.md","hash":"915c5fd89c227a2b2d314c255a922c2031b02e7c","modified":1622103121108},{"_id":"public/categories/index.html","hash":"03599d69625d658e00e82e737e4dce31c6e868ed","modified":1622100632346},{"_id":"source/tags/index.md","hash":"c66094ffa1b422bdfab43c0eec066cb0aada14af","modified":1622103164463},{"_id":"public/tags/index.html","hash":"2ac12123792f53826526bc4ef5479594bbb3b4b1","modified":1622100632346},{"_id":"source/home/index.md","hash":"17cf94a6e3615b4db6553c97db96ce14e547ec58","modified":1622107757133},{"_id":"public/home/index.html","hash":"fe6a628e625e6b00b3023c5710f84e1d3cafb342","modified":1622100632346},{"_id":"source/index.md","hash":"6e0e9f9b03c880c0c58dcaccbccd750fb03e99ae","modified":1625897215061},{"_id":"source/_posts/GO-GOMAXPROCS.md","hash":"8bf5be3e3219ff536709ea801a69e9d4027667bb","modified":1624884224796},{"_id":"source/_posts/GO-LOCK.md","hash":"bb3b61f708ca0a7774112efbf32652558d8fd827","modified":1624886831182},{"_id":"source/_posts/photo/mutex_state.png","hash":"abfb7706a2692cece1555edfaf734efc03ebffeb","modified":1624838910379},{"_id":"source/_posts/.DS_Store","hash":"fa740b27d2d195963022faa83c05edb3fa78f402","modified":1626169114367},{"_id":"source/.DS_Store","hash":"6fcace7caa859097b8f9f218205850220dc9f188","modified":1624885607655},{"_id":"source/_posts/GO-LOCK/1_core_cpu.png","hash":"87b5d4d93cda55581f1c5c0d9be5108bf884de12","modified":1624885645043},{"_id":"source/_posts/GO-LOCK/lock.png","hash":"58d30814552c71c720dae585c7e579b8df2d9852","modified":1624886384280},{"_id":"source/_posts/GO-LOCK/lock_sch.png","hash":"36aa21e009b903c4e88caaaca24853ee06afdddd","modified":1624886804100},{"_id":"source/_posts/GO-LOCK/.DS_Store","hash":"380a118351130a0a1da52c33180d5168efe8e948","modified":1624886389321},{"_id":"source/_posts/GO-LOCK/mutex_state.png","hash":"abfb7706a2692cece1555edfaf734efc03ebffeb","modified":1624838910379},{"_id":"source/_posts/mysql.md","hash":"3eaeb557d41745d9e763b9ed4191d2f0c0bd15a6","modified":1625904003325},{"_id":"source/_posts/GMP.md","hash":"b8cddd32d45a7ed5b069b57964ccd19501af6ccc","modified":1629279813390},{"_id":"source/_posts/mysql/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1625901674427},{"_id":"source/_posts/mysql/redo_log.png","hash":"ceafbb2fe08b332d785599dcf3137e50d47799c9","modified":1625902965597},{"_id":"source/_posts/mysql/update语句执行过程.png","hash":"d88535145637e74152dded78867c0e0e90a31253","modified":1625903902831},{"_id":"source/_posts/mysql/mysql_structure.png","hash":"513495381b72aa3a7c81f37be387db183a833a89","modified":1625897602859}],"Category":[{"name":"Linux","_id":"ckp6ku2ir0001aewvf22wdpgq"},{"name":"GO","_id":"ckqfvu19300026swv1ucddvua"},{"name":"Mysql","_id":"ckqxdctvx0001iywv3zgyaoj1"},{"name":"go","_id":"ckshb0zim0001nswvfs6oabdp"}],"Data":[],"Page":[{"title":"分类","date":"2021-05-27T08:10:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-05-27 16:10:54\ntype: \"categories\"\n---\n","updated":"2021-05-27T08:12:01.108Z","path":"categories/index.html","_id":"ckp6m9zxx0007aewv2n4f4bcj","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2021-05-27T08:10:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-05-27 16:10:56\ntype: \"tags\"\n---\n","updated":"2021-05-27T08:12:44.463Z","path":"tags/index.html","_id":"ckp6ma0nd0008aewve0v23nz6","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"WELCOME","date":"2021-05-26T16:00:00.000Z","updated":"2021-05-26T16:00:00.000Z","_content":"\n{% cq %}\n人类的本质是复读机。\n\n——**酥夫斯基**\n{% endcq %}","source":"index.md","raw":"---\ntitle: WELCOME\ndate: 2021-05-27\nupdated: 2021-05-27\n---\n\n{% cq %}\n人类的本质是复读机。\n\n——**酥夫斯基**\n{% endcq %}","path":"index.html","_id":"ckp6nzg5q0009aewvcl2m6u0g","comments":1,"layout":"page","content":"<blockquote class=\"blockquote-center\">\n            <i class=\"fa fa-quote-left\"></i>\n            <p>人类的本质是复读机。</p>\n<p>——<strong>酥夫斯基</strong></p>\n\n            <i class=\"fa fa-quote-right\"></i>\n          </blockquote>","site":{"data":{}},"excerpt":"","more":"<blockquote class=\"blockquote-center\">\n            <i class=\"fa fa-quote-left\"></i>\n            <p>人类的本质是复读机。</p>\n<p>——<strong>酥夫斯基</strong></p>\n\n            <i class=\"fa fa-quote-right\"></i>\n          </blockquote>"}],"Post":[{"title":"Linux task_struct Scheduler","date":"2021-05-27T07:23:51.000Z","comments":1,"_content":"\nLinux 进程/线程调度器的演进, draveness 《系统设计精要》读书笔记\n\n### (1) 初始调度器 · v0.01 ~ v2.4\nLinux 中, 无论是线程还是进程, 都由一个统一的结构体 task_struct 表示, 该结构定义在 {% link includes/sched.h  https://github.com/draveness/linux-archive/blob/master/0.01/include/linux/sched.h#L77 %} 中:\n{% codeblock kernel/sched.h lang:c highlight:true %}\nstruct task_struct {\n/* these are hardcoded - don't touch */\n  long state; /* -1 unrunnable, 0 runnable, >0 stopped */\n  long counter;\n  long priority;\n  long signal;\n  fn_ptr sig_restorer;\n  fn_ptr sig_fn[32];\n/* various fields */\n  int exit_code;\n  unsigned long end_code,end_data,brk,start_stack;\n  long pid,father,pgrp,session,leader;\n  unsigned short uid,euid,suid;\n  unsigned short gid,egid,sgid;\n  long alarm;\n  long utime,stime,cutime,cstime,start_time;\n  unsigned short used_math;\n/* file system info */\n  int tty;    /* -1 if no tty, so it must be signed */\n  unsigned short umask;\n  struct m_inode * pwd;\n  struct m_inode * root;\n  unsigned long close_on_exec;\n  struct file * filp[NR_OPEN];\n/* ldt for this task 0 - zero 1 - cs 2 - ds&ss */\n  struct desc_struct ldt[3];\n/* tss for this task */\n  struct tss_struct tss;\n};\n{% endcodeblock %}\n\n\n调度器的核心逻辑由 {% link kernel/sched.c https://github.com/draveness/linux-archive/blob/master/0.01/kernel/sched.c#L68 %} 中的 schedule() 函数定义;\n{% codeblock kernel/sched.c lang:c highlight:true %}\n/*\n *  'schedule()' is the scheduler function. This is GOOD CODE! There\n * probably won't be any reason to change this, as it should work well\n * in all circumstances (ie gives IO-bound processes good response etc).\n * The one thing you might take a look at is the signal-handler code here.\n *\n *   NOTE!!  Task 0 is the 'idle' task, which gets called when no other\n * tasks can run. It can not be killed, and it cannot sleep. The 'state'\n * information in task[0] is never used.\n */\nvoid schedule(void)\n{\n  int i,next,c;\n  struct task_struct ** p;\n/* check alarm, wake up any interruptible tasks that have got a signal */\n  for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)\n    if (*p) {\n      if ((*p)->alarm && (*p)->alarm < jiffies) {\n          (*p)->signal |= (1<<(SIGALRM-1));\n          (*p)->alarm = 0;\n        }\n\n      /* 唤醒获得信号的可中断进程 */\n      if ((*p)->signal && (*p)->state==TASK_INTERRUPTIBLE)\n        (*p)->state=TASK_RUNNING;\n    }\n/* this is the scheduler proper: */\n  while (1) {\n    c = -1;\n    next = 0;\n    /* NR_TASKS = 64, 该版本的调度器, 任务队列的长度限制为 64 */\n    i = NR_TASKS;\n    p = &task[NR_TASKS];\n    while (--i) {\n      if (!*--p)\n        continue;\n      /* \n       * 从后往前遍历任务队列, 找到 counter 最大的可执行进程\n       * counter 表示进程目前可占用的时间片数量\n       */\n      if ((*p)->state == TASK_RUNNING && (*p)->counter > c)\n        c = (*p)->counter, next = i;\n    }\n    /* 如果 max counter > 0 , 表明队列中存在还没用完时间片的任务, 则跳出循环, 执行 switch_to(next) 切换进程并分配资源 */\n    if (c) break;\n    /* 如果 max counter == 0, 表明队列中的所有任务都没有可用的时间片, 此时, 对所有任务都分配时间片 */\n    for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)\n      if (*p)\n        (*p)->counter = ((*p)->counter >> 1) +\n            (*p)->priority;\n  }\n  switch_to(next);\n}\n{% endcodeblock %}\n\nLinux 操作系统的计时器会每隔 10ms 触发一次 do_timer 将当前正在运行进程的 counter 减一，当前进程的计数器归零时就会重新触发调度。\n{% codeblock kernel/sched.c lang:c highlight:true %}\nvoid do_timer(long cpl)\n{\n  if (cpl)\n    current->utime++;\n  else\n    current->stime++;\n  if ((--current->counter)>0) return;\n  current->counter=0;\n  if (!cpl) return;\n  schedule();\n}\n{% endcodeblock %}\n\n","source":"_posts/Linux-task-struct-Scheduler.md","raw":"---\ntitle: Linux task_struct Scheduler\ndate: 2021-05-27 15:23:51\ntags: [调度器, 源码解析, draveness]\ncategories: Linux\ncomments: true\n---\n\nLinux 进程/线程调度器的演进, draveness 《系统设计精要》读书笔记\n\n### (1) 初始调度器 · v0.01 ~ v2.4\nLinux 中, 无论是线程还是进程, 都由一个统一的结构体 task_struct 表示, 该结构定义在 {% link includes/sched.h  https://github.com/draveness/linux-archive/blob/master/0.01/include/linux/sched.h#L77 %} 中:\n{% codeblock kernel/sched.h lang:c highlight:true %}\nstruct task_struct {\n/* these are hardcoded - don't touch */\n  long state; /* -1 unrunnable, 0 runnable, >0 stopped */\n  long counter;\n  long priority;\n  long signal;\n  fn_ptr sig_restorer;\n  fn_ptr sig_fn[32];\n/* various fields */\n  int exit_code;\n  unsigned long end_code,end_data,brk,start_stack;\n  long pid,father,pgrp,session,leader;\n  unsigned short uid,euid,suid;\n  unsigned short gid,egid,sgid;\n  long alarm;\n  long utime,stime,cutime,cstime,start_time;\n  unsigned short used_math;\n/* file system info */\n  int tty;    /* -1 if no tty, so it must be signed */\n  unsigned short umask;\n  struct m_inode * pwd;\n  struct m_inode * root;\n  unsigned long close_on_exec;\n  struct file * filp[NR_OPEN];\n/* ldt for this task 0 - zero 1 - cs 2 - ds&ss */\n  struct desc_struct ldt[3];\n/* tss for this task */\n  struct tss_struct tss;\n};\n{% endcodeblock %}\n\n\n调度器的核心逻辑由 {% link kernel/sched.c https://github.com/draveness/linux-archive/blob/master/0.01/kernel/sched.c#L68 %} 中的 schedule() 函数定义;\n{% codeblock kernel/sched.c lang:c highlight:true %}\n/*\n *  'schedule()' is the scheduler function. This is GOOD CODE! There\n * probably won't be any reason to change this, as it should work well\n * in all circumstances (ie gives IO-bound processes good response etc).\n * The one thing you might take a look at is the signal-handler code here.\n *\n *   NOTE!!  Task 0 is the 'idle' task, which gets called when no other\n * tasks can run. It can not be killed, and it cannot sleep. The 'state'\n * information in task[0] is never used.\n */\nvoid schedule(void)\n{\n  int i,next,c;\n  struct task_struct ** p;\n/* check alarm, wake up any interruptible tasks that have got a signal */\n  for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)\n    if (*p) {\n      if ((*p)->alarm && (*p)->alarm < jiffies) {\n          (*p)->signal |= (1<<(SIGALRM-1));\n          (*p)->alarm = 0;\n        }\n\n      /* 唤醒获得信号的可中断进程 */\n      if ((*p)->signal && (*p)->state==TASK_INTERRUPTIBLE)\n        (*p)->state=TASK_RUNNING;\n    }\n/* this is the scheduler proper: */\n  while (1) {\n    c = -1;\n    next = 0;\n    /* NR_TASKS = 64, 该版本的调度器, 任务队列的长度限制为 64 */\n    i = NR_TASKS;\n    p = &task[NR_TASKS];\n    while (--i) {\n      if (!*--p)\n        continue;\n      /* \n       * 从后往前遍历任务队列, 找到 counter 最大的可执行进程\n       * counter 表示进程目前可占用的时间片数量\n       */\n      if ((*p)->state == TASK_RUNNING && (*p)->counter > c)\n        c = (*p)->counter, next = i;\n    }\n    /* 如果 max counter > 0 , 表明队列中存在还没用完时间片的任务, 则跳出循环, 执行 switch_to(next) 切换进程并分配资源 */\n    if (c) break;\n    /* 如果 max counter == 0, 表明队列中的所有任务都没有可用的时间片, 此时, 对所有任务都分配时间片 */\n    for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)\n      if (*p)\n        (*p)->counter = ((*p)->counter >> 1) +\n            (*p)->priority;\n  }\n  switch_to(next);\n}\n{% endcodeblock %}\n\nLinux 操作系统的计时器会每隔 10ms 触发一次 do_timer 将当前正在运行进程的 counter 减一，当前进程的计数器归零时就会重新触发调度。\n{% codeblock kernel/sched.c lang:c highlight:true %}\nvoid do_timer(long cpl)\n{\n  if (cpl)\n    current->utime++;\n  else\n    current->stime++;\n  if ((--current->counter)>0) return;\n  current->counter=0;\n  if (!cpl) return;\n  schedule();\n}\n{% endcodeblock %}\n\n","slug":"Linux-task-struct-Scheduler","published":1,"updated":"2021-05-27T12:18:20.977Z","_id":"ckp6ku2il0000aewvdnjh6ihx","layout":"post","photos":[],"link":"","content":"<p>Linux 进程/线程调度器的演进, draveness 《系统设计精要》读书笔记</p>\n<h3 id=\"1-初始调度器-·-v0-01-v2-4\"><a href=\"#1-初始调度器-·-v0-01-v2-4\" class=\"headerlink\" title=\"(1) 初始调度器 · v0.01 ~ v2.4\"></a>(1) 初始调度器 · v0.01 ~ v2.4</h3><p>Linux 中, 无论是线程还是进程, 都由一个统一的结构体 task_struct 表示, 该结构定义在 <a href=\"https://github.com/draveness/linux-archive/blob/master/0.01/include/linux/sched.h#L77\" title target>includes&#x2F;sched.h</a> 中:</p>\n<figure class=\"highlight c\"><figcaption><span>kernel/sched.h</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">task_struct</span> &#123;</span></span><br><span class=\"line\"><span class=\"comment\">/* these are hardcoded - don&#x27;t touch */</span></span><br><span class=\"line\">  <span class=\"keyword\">long</span> state; <span class=\"comment\">/* -1 unrunnable, 0 runnable, &gt;0 stopped */</span></span><br><span class=\"line\">  <span class=\"keyword\">long</span> counter;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> priority;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> signal;</span><br><span class=\"line\">  fn_ptr sig_restorer;</span><br><span class=\"line\">  fn_ptr sig_fn[<span class=\"number\">32</span>];</span><br><span class=\"line\"><span class=\"comment\">/* various fields */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> exit_code;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> end_code,end_data,brk,start_stack;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> pid,father,pgrp,session,leader;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> uid,euid,suid;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> gid,egid,sgid;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> alarm;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> utime,stime,cutime,cstime,start_time;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> used_math;</span><br><span class=\"line\"><span class=\"comment\">/* file system info */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> tty;    <span class=\"comment\">/* -1 if no tty, so it must be signed */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> umask;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">m_inode</span> * <span class=\"title\">pwd</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">m_inode</span> * <span class=\"title\">root</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> close_on_exec;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">file</span> * <span class=\"title\">filp</span>[<span class=\"title\">NR_OPEN</span>];</span></span><br><span class=\"line\"><span class=\"comment\">/* ldt for this task 0 - zero 1 - cs 2 - ds&amp;ss */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">desc_struct</span> <span class=\"title\">ldt</span>[3];</span></span><br><span class=\"line\"><span class=\"comment\">/* tss for this task */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tss_struct</span> <span class=\"title\">tss</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<p>调度器的核心逻辑由 <a href=\"https://github.com/draveness/linux-archive/blob/master/0.01/kernel/sched.c#L68\" title target>kernel&#x2F;sched.c</a> 中的 schedule() 函数定义;</p>\n<figure class=\"highlight c\"><figcaption><span>kernel/sched.c</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  &#x27;schedule()&#x27; is the scheduler function. This is GOOD CODE! There</span></span><br><span class=\"line\"><span class=\"comment\"> * probably won&#x27;t be any reason to change this, as it should work well</span></span><br><span class=\"line\"><span class=\"comment\"> * in all circumstances (ie gives IO-bound processes good response etc).</span></span><br><span class=\"line\"><span class=\"comment\"> * The one thing you might take a look at is the signal-handler code here.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   NOTE!!  Task 0 is the &#x27;idle&#x27; task, which gets called when no other</span></span><br><span class=\"line\"><span class=\"comment\"> * tasks can run. It can not be killed, and it cannot sleep. The &#x27;state&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"> * information in task[0] is never used.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i,next,c;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">task_struct</span> ** <span class=\"title\">p</span>;</span></span><br><span class=\"line\"><span class=\"comment\">/* check alarm, wake up any interruptible tasks that have got a signal */</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*p) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((*p)-&gt;alarm &amp;&amp; (*p)-&gt;alarm &lt; jiffies) &#123;</span><br><span class=\"line\">          (*p)-&gt;signal |= (<span class=\"number\">1</span>&lt;&lt;(SIGALRM<span class=\"number\">-1</span>));</span><br><span class=\"line\">          (*p)-&gt;alarm = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* 唤醒获得信号的可中断进程 */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((*p)-&gt;signal &amp;&amp; (*p)-&gt;state==TASK_INTERRUPTIBLE)</span><br><span class=\"line\">        (*p)-&gt;state=TASK_RUNNING;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">/* this is the scheduler proper: */</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    c = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    next = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* NR_TASKS = 64, 该版本的调度器, 任务队列的长度限制为 64 */</span></span><br><span class=\"line\">    i = NR_TASKS;</span><br><span class=\"line\">    p = &amp;task[NR_TASKS];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (--i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!*--p)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">       * 从后往前遍历任务队列, 找到 counter 最大的可执行进程</span></span><br><span class=\"line\"><span class=\"comment\">       * counter 表示进程目前可占用的时间片数量</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c)</span><br><span class=\"line\">        c = (*p)-&gt;counter, next = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* 如果 max counter &gt; 0 , 表明队列中存在还没用完时间片的任务, 则跳出循环, 执行 switch_to(next) 切换进程并分配资源 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 如果 max counter == 0, 表明队列中的所有任务都没有可用的时间片, 此时, 对所有任务都分配时间片 */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (*p)</span><br><span class=\"line\">        (*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; <span class=\"number\">1</span>) +</span><br><span class=\"line\">            (*p)-&gt;priority;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  switch_to(next);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Linux 操作系统的计时器会每隔 10ms 触发一次 do_timer 将当前正在运行进程的 counter 减一，当前进程的计数器归零时就会重新触发调度。</p>\n<figure class=\"highlight c\"><figcaption><span>kernel/sched.c</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">do_timer</span><span class=\"params\">(<span class=\"keyword\">long</span> cpl)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cpl)</span><br><span class=\"line\">    current-&gt;utime++;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    current-&gt;stime++;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((--current-&gt;counter)&gt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  current-&gt;counter=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cpl) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  schedule();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>Linux 进程/线程调度器的演进, draveness 《系统设计精要》读书笔记</p>\n<h3 id=\"1-初始调度器-·-v0-01-v2-4\"><a href=\"#1-初始调度器-·-v0-01-v2-4\" class=\"headerlink\" title=\"(1) 初始调度器 · v0.01 ~ v2.4\"></a>(1) 初始调度器 · v0.01 ~ v2.4</h3><p>Linux 中, 无论是线程还是进程, 都由一个统一的结构体 task_struct 表示, 该结构定义在 <a href=\"https://github.com/draveness/linux-archive/blob/master/0.01/include/linux/sched.h#L77\" title target>includes&#x2F;sched.h</a> 中:</p>\n<figure class=\"highlight c\"><figcaption><span>kernel/sched.h</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">task_struct</span> &#123;</span></span><br><span class=\"line\"><span class=\"comment\">/* these are hardcoded - don&#x27;t touch */</span></span><br><span class=\"line\">  <span class=\"keyword\">long</span> state; <span class=\"comment\">/* -1 unrunnable, 0 runnable, &gt;0 stopped */</span></span><br><span class=\"line\">  <span class=\"keyword\">long</span> counter;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> priority;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> signal;</span><br><span class=\"line\">  fn_ptr sig_restorer;</span><br><span class=\"line\">  fn_ptr sig_fn[<span class=\"number\">32</span>];</span><br><span class=\"line\"><span class=\"comment\">/* various fields */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> exit_code;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> end_code,end_data,brk,start_stack;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> pid,father,pgrp,session,leader;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> uid,euid,suid;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> gid,egid,sgid;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> alarm;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> utime,stime,cutime,cstime,start_time;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> used_math;</span><br><span class=\"line\"><span class=\"comment\">/* file system info */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> tty;    <span class=\"comment\">/* -1 if no tty, so it must be signed */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> umask;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">m_inode</span> * <span class=\"title\">pwd</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">m_inode</span> * <span class=\"title\">root</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> close_on_exec;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">file</span> * <span class=\"title\">filp</span>[<span class=\"title\">NR_OPEN</span>];</span></span><br><span class=\"line\"><span class=\"comment\">/* ldt for this task 0 - zero 1 - cs 2 - ds&amp;ss */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">desc_struct</span> <span class=\"title\">ldt</span>[3];</span></span><br><span class=\"line\"><span class=\"comment\">/* tss for this task */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tss_struct</span> <span class=\"title\">tss</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<p>调度器的核心逻辑由 <a href=\"https://github.com/draveness/linux-archive/blob/master/0.01/kernel/sched.c#L68\" title target>kernel&#x2F;sched.c</a> 中的 schedule() 函数定义;</p>\n<figure class=\"highlight c\"><figcaption><span>kernel/sched.c</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  &#x27;schedule()&#x27; is the scheduler function. This is GOOD CODE! There</span></span><br><span class=\"line\"><span class=\"comment\"> * probably won&#x27;t be any reason to change this, as it should work well</span></span><br><span class=\"line\"><span class=\"comment\"> * in all circumstances (ie gives IO-bound processes good response etc).</span></span><br><span class=\"line\"><span class=\"comment\"> * The one thing you might take a look at is the signal-handler code here.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   NOTE!!  Task 0 is the &#x27;idle&#x27; task, which gets called when no other</span></span><br><span class=\"line\"><span class=\"comment\"> * tasks can run. It can not be killed, and it cannot sleep. The &#x27;state&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"> * information in task[0] is never used.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i,next,c;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">task_struct</span> ** <span class=\"title\">p</span>;</span></span><br><span class=\"line\"><span class=\"comment\">/* check alarm, wake up any interruptible tasks that have got a signal */</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*p) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((*p)-&gt;alarm &amp;&amp; (*p)-&gt;alarm &lt; jiffies) &#123;</span><br><span class=\"line\">          (*p)-&gt;signal |= (<span class=\"number\">1</span>&lt;&lt;(SIGALRM<span class=\"number\">-1</span>));</span><br><span class=\"line\">          (*p)-&gt;alarm = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* 唤醒获得信号的可中断进程 */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((*p)-&gt;signal &amp;&amp; (*p)-&gt;state==TASK_INTERRUPTIBLE)</span><br><span class=\"line\">        (*p)-&gt;state=TASK_RUNNING;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">/* this is the scheduler proper: */</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    c = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    next = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* NR_TASKS = 64, 该版本的调度器, 任务队列的长度限制为 64 */</span></span><br><span class=\"line\">    i = NR_TASKS;</span><br><span class=\"line\">    p = &amp;task[NR_TASKS];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (--i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!*--p)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">       * 从后往前遍历任务队列, 找到 counter 最大的可执行进程</span></span><br><span class=\"line\"><span class=\"comment\">       * counter 表示进程目前可占用的时间片数量</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c)</span><br><span class=\"line\">        c = (*p)-&gt;counter, next = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* 如果 max counter &gt; 0 , 表明队列中存在还没用完时间片的任务, 则跳出循环, 执行 switch_to(next) 切换进程并分配资源 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 如果 max counter == 0, 表明队列中的所有任务都没有可用的时间片, 此时, 对所有任务都分配时间片 */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (*p)</span><br><span class=\"line\">        (*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; <span class=\"number\">1</span>) +</span><br><span class=\"line\">            (*p)-&gt;priority;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  switch_to(next);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Linux 操作系统的计时器会每隔 10ms 触发一次 do_timer 将当前正在运行进程的 counter 减一，当前进程的计数器归零时就会重新触发调度。</p>\n<figure class=\"highlight c\"><figcaption><span>kernel/sched.c</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">do_timer</span><span class=\"params\">(<span class=\"keyword\">long</span> cpl)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cpl)</span><br><span class=\"line\">    current-&gt;utime++;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    current-&gt;stime++;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((--current-&gt;counter)&gt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  current-&gt;counter=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cpl) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  schedule();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"GO 互斥锁","date":"2021-06-26T08:36:15.000Z","comments":1,"_content":"\n数据结构\n````\ntype Mutex struct {\n  state int32\n  sema  uint32\n}\n````\n(1) state: 表示当前互斥锁的状态信息\n{% asset_img mutex_state.png mutex state 的各个位的含义 %}\n(2) sema: 控制 goroutinue 阻塞与唤醒的信号量\n\n\nLock()\n{% asset_img lock_sch.png 加锁过程 %}\n\n\n满足自旋的条件\n(1) 当前互斥锁处于正常状态 (饥饿状态下, goroutinue 全部都按照 FIFO 的顺序进入队列, 不需要自旋)\n(2) 当前运行运行的机器是多核 CPU (单核 cpu 下, 本身处理速度慢, 自旋是空转 cpu, 所以更加损耗性能)\n{% asset_img 1_core_cpu.png 单核 cpu 下自旋的情况 %}\n(3) 至少存在一个其他正在运行的处理器 P (GOMAXPROCS > 1, GOMAXPROCS 的默认值其实就是 cpu 核数, 前面已经讲过必须是多核的)，并且它的本地运行队列(local runq)为空\n(4) 当前goroutine进行自旋的次数小于4\n\n所谓自旋, 其实就是执行 30 次 PAUSE 指令, 消耗着 cpu 进行忙等待;\n","source":"_posts/GO-LOCK.md","raw":"---\ntitle: GO 互斥锁\ndate: 2021-06-26 16:36:15\ntags: [GO源码解析]\ncategories: GO\ncomments: true\n---\n\n数据结构\n````\ntype Mutex struct {\n  state int32\n  sema  uint32\n}\n````\n(1) state: 表示当前互斥锁的状态信息\n{% asset_img mutex_state.png mutex state 的各个位的含义 %}\n(2) sema: 控制 goroutinue 阻塞与唤醒的信号量\n\n\nLock()\n{% asset_img lock_sch.png 加锁过程 %}\n\n\n满足自旋的条件\n(1) 当前互斥锁处于正常状态 (饥饿状态下, goroutinue 全部都按照 FIFO 的顺序进入队列, 不需要自旋)\n(2) 当前运行运行的机器是多核 CPU (单核 cpu 下, 本身处理速度慢, 自旋是空转 cpu, 所以更加损耗性能)\n{% asset_img 1_core_cpu.png 单核 cpu 下自旋的情况 %}\n(3) 至少存在一个其他正在运行的处理器 P (GOMAXPROCS > 1, GOMAXPROCS 的默认值其实就是 cpu 核数, 前面已经讲过必须是多核的)，并且它的本地运行队列(local runq)为空\n(4) 当前goroutine进行自旋的次数小于4\n\n所谓自旋, 其实就是执行 30 次 PAUSE 指令, 消耗着 cpu 进行忙等待;\n","slug":"GO-LOCK","published":1,"updated":"2021-06-28T13:27:11.182Z","_id":"ckqfvu19200016swvc31n37xt","layout":"post","photos":[],"link":"","content":"<p>数据结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Mutex struct &#123;</span><br><span class=\"line\">  state int32</span><br><span class=\"line\">  sema  uint32</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(1) state: 表示当前互斥锁的状态信息</p>\n<img src=\"/2021/06/26/GO-LOCK/mutex_state.png\" class title=\"mutex state 的各个位的含义\">\n<p>(2) sema: 控制 goroutinue 阻塞与唤醒的信号量</p>\n<p>Lock()</p>\n<img src=\"/2021/06/26/GO-LOCK/lock_sch.png\" class title=\"加锁过程\">\n\n\n<p>满足自旋的条件<br>(1) 当前互斥锁处于正常状态 (饥饿状态下, goroutinue 全部都按照 FIFO 的顺序进入队列, 不需要自旋)<br>(2) 当前运行运行的机器是多核 CPU (单核 cpu 下, 本身处理速度慢, 自旋是空转 cpu, 所以更加损耗性能)</p>\n<img src=\"/2021/06/26/GO-LOCK/1_core_cpu.png\" class title=\"单核 cpu 下自旋的情况\">\n<p>(3) 至少存在一个其他正在运行的处理器 P (GOMAXPROCS &gt; 1, GOMAXPROCS 的默认值其实就是 cpu 核数, 前面已经讲过必须是多核的)，并且它的本地运行队列(local runq)为空<br>(4) 当前goroutine进行自旋的次数小于4</p>\n<p>所谓自旋, 其实就是执行 30 次 PAUSE 指令, 消耗着 cpu 进行忙等待;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>数据结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Mutex struct &#123;</span><br><span class=\"line\">  state int32</span><br><span class=\"line\">  sema  uint32</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(1) state: 表示当前互斥锁的状态信息</p>\n<img src=\"/2021/06/26/GO-LOCK/mutex_state.png\" class title=\"mutex state 的各个位的含义\">\n<p>(2) sema: 控制 goroutinue 阻塞与唤醒的信号量</p>\n<p>Lock()</p>\n<img src=\"/2021/06/26/GO-LOCK/lock_sch.png\" class title=\"加锁过程\">\n\n\n<p>满足自旋的条件<br>(1) 当前互斥锁处于正常状态 (饥饿状态下, goroutinue 全部都按照 FIFO 的顺序进入队列, 不需要自旋)<br>(2) 当前运行运行的机器是多核 CPU (单核 cpu 下, 本身处理速度慢, 自旋是空转 cpu, 所以更加损耗性能)</p>\n<img src=\"/2021/06/26/GO-LOCK/1_core_cpu.png\" class title=\"单核 cpu 下自旋的情况\">\n<p>(3) 至少存在一个其他正在运行的处理器 P (GOMAXPROCS &gt; 1, GOMAXPROCS 的默认值其实就是 cpu 核数, 前面已经讲过必须是多核的)，并且它的本地运行队列(local runq)为空<br>(4) 当前goroutine进行自旋的次数小于4</p>\n<p>所谓自旋, 其实就是执行 30 次 PAUSE 指令, 消耗着 cpu 进行忙等待;</p>\n"},{"title":"mysql","date":"2021-07-10T06:10:00.000Z","comments":1,"_content":"\n{% asset_img mysql_structure.png mysql架构 %}\n\n# mysql 架构\n## 连接器\n管理连接, 权限验证\n``` mysql -h$host -P$port -u$user -p ```\n(1) 在客户端与服务端之间建立 TCP 连接\n(2) 客户端向服务端发送用户名和密码验证\n(3) 如果用户名密码错误, 返回错误: Access denied for user\n(4) 连接器查询权限表获取用户的权限, 此后这个连接里面所有的权限判断逻辑都基于此时读到的权限\n\n查看 mysql 的所有 thread 情况(对应不同的连接)\n``` mysqladmin -u root -p processlist ```\n\n查看 mysql 长链接最大空闲时间\n``` show global variables like 'wait_timeout'; ```\n\n\n## 查询缓存\n在频繁更新的数据库中, 每次更新数据都会清空查询缓存, 在这种情况下, 查询缓存是不推荐使用的, mysql8.0已经去掉查询缓存\n显式指定需要查询缓存\nselect SQL_CACHE * from T where ID=10；\n\n## 分析器\n分成解析器和预处理器, 解析器分成词法分析和语法分析两个阶段, 预处理器进一步检查语法书的合理性, 比如, 数据表和数据列是否存在, 别名是否有歧义等\n\n## 优化器\n在多个索引的时候, 选择用哪个索引, 在多表 join 的时候, 选择表的连接顺序\n\n## 执行器\n(1) 判断用户是否有表的执行权限\n(2) 有权限的情况下, 就通过存储引擎打开表进行查询;\n\n# 日志系统\n## redo log\nWAL (Write-Ahead Logging)技术: 先写日志, 再写磁盘;\ncrash-safe 能力: 当数据库意外重启时, 因为有 innodDB 的 redo log 日志, 所以数据不会丢失;\n\n在进行更新操作的时候, innoDB 引擎会先把更新日志写入 redo log, 更新内存, 这就算完成了更新操作; 在空闲的时候, innoDB 会将 redo log 里面的操作日志写入磁盘; 如果 redo log 写满的情况下, innoDB 需要先擦掉一些数据才能允许新的更新操作;\n\n{% asset_img redo_log.png redo log %}\nwrite pos: 当前写入的位置\ncheck point: 当前擦出的位置\n当 write pos 追上 check point 时, 表示 redo log 写满了;\n\n## binlog\nserver 层的归档日志, 可以给所有的存储引擎用\nbinlog 和 redo log 不一样, 它是没有固定空间大小的, 只要有日志就可以追加写, 且, 二者的日志信息不一样, redo log 写的是对一条数据的修改, binlog 写的是 mysql 语句的原始逻辑;\n\n\n有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。\n``` update T set c=c+1 where ID=2; ```\n(1) 执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。\n(2) 执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。\n(3) 引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。\n(4) 执行器生成这个操作的 binlog，并把 binlog 写入磁盘。\n(5) 执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。\n{% asset_img update语句执行过程.png update语句执行过程 %}\n\n\n\n","source":"_posts/mysql.md","raw":"---\ntitle: mysql\ndate: 2021-07-10 14:10:00\ntags: [mysql]\ncategories: Mysql\ncomments: true\n---\n\n{% asset_img mysql_structure.png mysql架构 %}\n\n# mysql 架构\n## 连接器\n管理连接, 权限验证\n``` mysql -h$host -P$port -u$user -p ```\n(1) 在客户端与服务端之间建立 TCP 连接\n(2) 客户端向服务端发送用户名和密码验证\n(3) 如果用户名密码错误, 返回错误: Access denied for user\n(4) 连接器查询权限表获取用户的权限, 此后这个连接里面所有的权限判断逻辑都基于此时读到的权限\n\n查看 mysql 的所有 thread 情况(对应不同的连接)\n``` mysqladmin -u root -p processlist ```\n\n查看 mysql 长链接最大空闲时间\n``` show global variables like 'wait_timeout'; ```\n\n\n## 查询缓存\n在频繁更新的数据库中, 每次更新数据都会清空查询缓存, 在这种情况下, 查询缓存是不推荐使用的, mysql8.0已经去掉查询缓存\n显式指定需要查询缓存\nselect SQL_CACHE * from T where ID=10；\n\n## 分析器\n分成解析器和预处理器, 解析器分成词法分析和语法分析两个阶段, 预处理器进一步检查语法书的合理性, 比如, 数据表和数据列是否存在, 别名是否有歧义等\n\n## 优化器\n在多个索引的时候, 选择用哪个索引, 在多表 join 的时候, 选择表的连接顺序\n\n## 执行器\n(1) 判断用户是否有表的执行权限\n(2) 有权限的情况下, 就通过存储引擎打开表进行查询;\n\n# 日志系统\n## redo log\nWAL (Write-Ahead Logging)技术: 先写日志, 再写磁盘;\ncrash-safe 能力: 当数据库意外重启时, 因为有 innodDB 的 redo log 日志, 所以数据不会丢失;\n\n在进行更新操作的时候, innoDB 引擎会先把更新日志写入 redo log, 更新内存, 这就算完成了更新操作; 在空闲的时候, innoDB 会将 redo log 里面的操作日志写入磁盘; 如果 redo log 写满的情况下, innoDB 需要先擦掉一些数据才能允许新的更新操作;\n\n{% asset_img redo_log.png redo log %}\nwrite pos: 当前写入的位置\ncheck point: 当前擦出的位置\n当 write pos 追上 check point 时, 表示 redo log 写满了;\n\n## binlog\nserver 层的归档日志, 可以给所有的存储引擎用\nbinlog 和 redo log 不一样, 它是没有固定空间大小的, 只要有日志就可以追加写, 且, 二者的日志信息不一样, redo log 写的是对一条数据的修改, binlog 写的是 mysql 语句的原始逻辑;\n\n\n有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。\n``` update T set c=c+1 where ID=2; ```\n(1) 执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。\n(2) 执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。\n(3) 引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。\n(4) 执行器生成这个操作的 binlog，并把 binlog 写入磁盘。\n(5) 执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。\n{% asset_img update语句执行过程.png update语句执行过程 %}\n\n\n\n","slug":"mysql","published":1,"updated":"2021-07-10T08:00:03.325Z","_id":"ckqxdbzph0000iywvdtmyemel","layout":"post","photos":[],"link":"","content":"<img src=\"/2021/07/10/mysql/mysql_structure.png\" class title=\"mysql架构\">\n\n<h1 id=\"mysql-架构\"><a href=\"#mysql-架构\" class=\"headerlink\" title=\"mysql 架构\"></a>mysql 架构</h1><h2 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h2><p>管理连接, 权限验证<br><code>mysql -h$host -P$port -u$user -p</code><br>(1) 在客户端与服务端之间建立 TCP 连接<br>(2) 客户端向服务端发送用户名和密码验证<br>(3) 如果用户名密码错误, 返回错误: Access denied for user<br>(4) 连接器查询权限表获取用户的权限, 此后这个连接里面所有的权限判断逻辑都基于此时读到的权限</p>\n<p>查看 mysql 的所有 thread 情况(对应不同的连接)<br><code>mysqladmin -u root -p processlist</code></p>\n<p>查看 mysql 长链接最大空闲时间<br><code>show global variables like &#39;wait_timeout&#39;;</code></p>\n<h2 id=\"查询缓存\"><a href=\"#查询缓存\" class=\"headerlink\" title=\"查询缓存\"></a>查询缓存</h2><p>在频繁更新的数据库中, 每次更新数据都会清空查询缓存, 在这种情况下, 查询缓存是不推荐使用的, mysql8.0已经去掉查询缓存<br>显式指定需要查询缓存<br>select SQL_CACHE * from T where ID=10；</p>\n<h2 id=\"分析器\"><a href=\"#分析器\" class=\"headerlink\" title=\"分析器\"></a>分析器</h2><p>分成解析器和预处理器, 解析器分成词法分析和语法分析两个阶段, 预处理器进一步检查语法书的合理性, 比如, 数据表和数据列是否存在, 别名是否有歧义等</p>\n<h2 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h2><p>在多个索引的时候, 选择用哪个索引, 在多表 join 的时候, 选择表的连接顺序</p>\n<h2 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h2><p>(1) 判断用户是否有表的执行权限<br>(2) 有权限的情况下, 就通过存储引擎打开表进行查询;</p>\n<h1 id=\"日志系统\"><a href=\"#日志系统\" class=\"headerlink\" title=\"日志系统\"></a>日志系统</h1><h2 id=\"redo-log\"><a href=\"#redo-log\" class=\"headerlink\" title=\"redo log\"></a>redo log</h2><p>WAL (Write-Ahead Logging)技术: 先写日志, 再写磁盘;<br>crash-safe 能力: 当数据库意外重启时, 因为有 innodDB 的 redo log 日志, 所以数据不会丢失;</p>\n<p>在进行更新操作的时候, innoDB 引擎会先把更新日志写入 redo log, 更新内存, 这就算完成了更新操作; 在空闲的时候, innoDB 会将 redo log 里面的操作日志写入磁盘; 如果 redo log 写满的情况下, innoDB 需要先擦掉一些数据才能允许新的更新操作;</p>\n<img src=\"/2021/07/10/mysql/redo_log.png\" class title=\"redo log\">\n<p>write pos: 当前写入的位置<br>check point: 当前擦出的位置<br>当 write pos 追上 check point 时, 表示 redo log 写满了;</p>\n<h2 id=\"binlog\"><a href=\"#binlog\" class=\"headerlink\" title=\"binlog\"></a>binlog</h2><p>server 层的归档日志, 可以给所有的存储引擎用<br>binlog 和 redo log 不一样, 它是没有固定空间大小的, 只要有日志就可以追加写, 且, 二者的日志信息不一样, redo log 写的是对一条数据的修改, binlog 写的是 mysql 语句的原始逻辑;</p>\n<p>有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。<br><code>update T set c=c+1 where ID=2;</code><br>(1) 执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。<br>(2) 执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。<br>(3) 引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。<br>(4) 执行器生成这个操作的 binlog，并把 binlog 写入磁盘。<br>(5) 执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</p>\n<img src=\"/2021/07/10/mysql/update%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png\" class title=\"update语句执行过程\">\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2021/07/10/mysql/mysql_structure.png\" class title=\"mysql架构\">\n\n<h1 id=\"mysql-架构\"><a href=\"#mysql-架构\" class=\"headerlink\" title=\"mysql 架构\"></a>mysql 架构</h1><h2 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h2><p>管理连接, 权限验证<br><code>mysql -h$host -P$port -u$user -p</code><br>(1) 在客户端与服务端之间建立 TCP 连接<br>(2) 客户端向服务端发送用户名和密码验证<br>(3) 如果用户名密码错误, 返回错误: Access denied for user<br>(4) 连接器查询权限表获取用户的权限, 此后这个连接里面所有的权限判断逻辑都基于此时读到的权限</p>\n<p>查看 mysql 的所有 thread 情况(对应不同的连接)<br><code>mysqladmin -u root -p processlist</code></p>\n<p>查看 mysql 长链接最大空闲时间<br><code>show global variables like &#39;wait_timeout&#39;;</code></p>\n<h2 id=\"查询缓存\"><a href=\"#查询缓存\" class=\"headerlink\" title=\"查询缓存\"></a>查询缓存</h2><p>在频繁更新的数据库中, 每次更新数据都会清空查询缓存, 在这种情况下, 查询缓存是不推荐使用的, mysql8.0已经去掉查询缓存<br>显式指定需要查询缓存<br>select SQL_CACHE * from T where ID=10；</p>\n<h2 id=\"分析器\"><a href=\"#分析器\" class=\"headerlink\" title=\"分析器\"></a>分析器</h2><p>分成解析器和预处理器, 解析器分成词法分析和语法分析两个阶段, 预处理器进一步检查语法书的合理性, 比如, 数据表和数据列是否存在, 别名是否有歧义等</p>\n<h2 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h2><p>在多个索引的时候, 选择用哪个索引, 在多表 join 的时候, 选择表的连接顺序</p>\n<h2 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h2><p>(1) 判断用户是否有表的执行权限<br>(2) 有权限的情况下, 就通过存储引擎打开表进行查询;</p>\n<h1 id=\"日志系统\"><a href=\"#日志系统\" class=\"headerlink\" title=\"日志系统\"></a>日志系统</h1><h2 id=\"redo-log\"><a href=\"#redo-log\" class=\"headerlink\" title=\"redo log\"></a>redo log</h2><p>WAL (Write-Ahead Logging)技术: 先写日志, 再写磁盘;<br>crash-safe 能力: 当数据库意外重启时, 因为有 innodDB 的 redo log 日志, 所以数据不会丢失;</p>\n<p>在进行更新操作的时候, innoDB 引擎会先把更新日志写入 redo log, 更新内存, 这就算完成了更新操作; 在空闲的时候, innoDB 会将 redo log 里面的操作日志写入磁盘; 如果 redo log 写满的情况下, innoDB 需要先擦掉一些数据才能允许新的更新操作;</p>\n<img src=\"/2021/07/10/mysql/redo_log.png\" class title=\"redo log\">\n<p>write pos: 当前写入的位置<br>check point: 当前擦出的位置<br>当 write pos 追上 check point 时, 表示 redo log 写满了;</p>\n<h2 id=\"binlog\"><a href=\"#binlog\" class=\"headerlink\" title=\"binlog\"></a>binlog</h2><p>server 层的归档日志, 可以给所有的存储引擎用<br>binlog 和 redo log 不一样, 它是没有固定空间大小的, 只要有日志就可以追加写, 且, 二者的日志信息不一样, redo log 写的是对一条数据的修改, binlog 写的是 mysql 语句的原始逻辑;</p>\n<p>有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。<br><code>update T set c=c+1 where ID=2;</code><br>(1) 执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。<br>(2) 执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。<br>(3) 引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。<br>(4) 执行器生成这个操作的 binlog，并把 binlog 写入磁盘。<br>(5) 执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</p>\n<img src=\"/2021/07/10/mysql/update%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png\" class title=\"update语句执行过程\">\n\n\n\n"},{"title":"GMP structure","date":"2021-08-16T06:10:00.000Z","comments":1,"_content":"\n# 概念\nGOMAXPROCS: GMP 中 P 的最大数量, 默认值是 cpu 的逻辑核数;\nCPU 上下文: CPU 寄存器和程序计数器;\n进程: 操作系统资源分配和调度的基本单位;\n线程: 操作系统执行运算调度的基本单位;\n协程: coroutine/fiber 用户空间线程, 由应用程序自主控制的轻量级线程;\n\n进程上下文切换: 用户态资源(进程的虚拟内存, 栈, 全局变量等资源)切换 和 内核态资源(上下文)切换;\n线程上下文切换: 用户态资源(线程的栈) 和 内核态资源(上下文);\n\n一个进程可以拥有多个线程, 这些线程共享进程的内存空间;\n\n线程各自拥有约 1M 的内存空间, 并且需要切换上下文, 有一定的开销;\n协程各自拥有约 1K 的内存空间, 因为是应用程序在调度, 所以不需要切换上下文;\n\n# GO 调度器\n## G-M 模型 (1.1 之前)\n全局就一个 scheduler 和一把全局锁, scheduler 内维护全局唯一一个 Goroutine 可执行队列\n(1) 锁竞争激烈\n(2) 线程间互相传递可运行的 Goroutine, 引入大量的延迟和额外的开销;\n例子: 比如当 G 中包含创建新协程的时候，M 创建了 G’，为了继续执行 G，需要把 G’交给 M’执行，也造成了很差的局部性，因为 G’和 G 是相关的，最好放在 M 上执行，而不是其他 M’。\n(3) 系统调用(内核态访问文件,设备等)频繁阻塞和解除阻塞线程, 增加了额外的开销;\n(4) 每个线程都需要处理内存缓存，导致大量的内存占用并影响数据局部性;\n例子: 比如当 G 中包含创建新协程的时候，M 创建了 G’，并且对 G’ 进行内存缓存, 换到 M' 运行, M' 又要维护一份 G' 的内存缓存, 创建的 G' 多了, 额外的内存缓存就多了;\n\n## G-M-P 模型 (1.1 至今)\n1. 锁竞争问题\nG-M 模型的性能开销大头就是锁竞争, 所以, 减少锁竞争是头号目标;\nG-M-P 模型, 引入 P(Processor), 每个 P 维护了一个本地可运行 Goroutine 队列(本地 runq), 以及, 绑定了一个 M, 这样, 它就可以从本地 runq 中直接获取下一个 Goroutine 运行, 极大地减少了锁竞争, 缓解了上述问题(1);\n同时, M 新建 G', G' 放入本地 runq, 之后大概率在 M 线程中运行, 不需要额外的给 M' 创建 G' 的内存缓存, 缓解了问题 (2)(4);\n2. 堵塞问题\n引入窃取式调度\n(1) M 的本地 runq 中没有可运行的 Goroutine 了, 窃取其他 M 的本地 runq 或者全局 runq 中的任务, 平衡各个 M 的本地 runq 长度;\n(2) M 被系统调用阻塞, 则解绑 MP, 把 P 给到别的 M', 等到解除阻塞时, 再分配新的 P, 减小阻塞带来的影响;\n3. 为什么引入 P\n在 GOMAXPROCS 个 M 全部被占用的状态下, 需要新建 M 来处理新的 G, 只要 M 不超过阈值就行;\n\n为什么引入 P, 转变为要不要解耦 MP 的问题:\n不解耦: M 堵塞, 则 cpu 被分配到 M‘, 由于 M 上面还有 runq, M‘, M'' 等都可以窃取 M 的 Goroutine;\n解耦: M 堵塞, 则 P 被分配到 M‘, M‘ 运行完当前 Goroutine, 直接从 P 中取 Goroutine, 减少窃取的压力;\n\n## 抢占式调度器 (1.2 至今)\n抢占式调度解决的问题\n(1) 大的 Goroutine 可能占用线程太长时间, 造成其他 Goroutine 的饥饿;\n(2) 垃圾回收 STW, 会造成整个程序的停摆, 需要抢占式调度中断这个过程;\n\n### 基于协作的抢占式调度(1.2 ~ 1.13)\n基于协作的抢占式调度, 在编译阶段, 会给函数插入抢占函数, 在运行时, 调用函数的时候, 会调用抢占函数, 判断函数是否被抢占, 如果是, 则释放 M;\n因为是在函数被调用时判断是否被抢占, 所以, 没有办法及时中断和释放资源, 如果遇到很长的 for 循环或者垃圾回收长时间占用线程, 则是不能及时释放资源的;\n\n### 基于信号的抢占式调度(1.14 至今)\n在程序启动时, 注册信号 SIGURG 和信号处理函数, 在特定时候会触发抢占, 发送 SIGURG 信号; 收到信号的 Goroutine 会被挂起然后退出线程;\n触发信号发送时机:\n(1) go 后台监控 runtime.sysmon 检测超时发送抢占信号;\n(2) go 垃圾回收栈扫描时发送抢占信号;\n(3) go 垃圾回收 STW 时调用 preemptall 发送抢占信号, 暂停所有的 P;\n\n\n\n\n\n","source":"_posts/GMP.md","raw":"---\ntitle: GMP structure\ndate: 2021-08-16 14:10:00\ntags: [GO]\ncategories: GO\ncomments: true\n---\n\n# 概念\nGOMAXPROCS: GMP 中 P 的最大数量, 默认值是 cpu 的逻辑核数;\nCPU 上下文: CPU 寄存器和程序计数器;\n进程: 操作系统资源分配和调度的基本单位;\n线程: 操作系统执行运算调度的基本单位;\n协程: coroutine/fiber 用户空间线程, 由应用程序自主控制的轻量级线程;\n\n进程上下文切换: 用户态资源(进程的虚拟内存, 栈, 全局变量等资源)切换 和 内核态资源(上下文)切换;\n线程上下文切换: 用户态资源(线程的栈) 和 内核态资源(上下文);\n\n一个进程可以拥有多个线程, 这些线程共享进程的内存空间;\n\n线程各自拥有约 1M 的内存空间, 并且需要切换上下文, 有一定的开销;\n协程各自拥有约 1K 的内存空间, 因为是应用程序在调度, 所以不需要切换上下文;\n\n# GO 调度器\n## G-M 模型 (1.1 之前)\n全局就一个 scheduler 和一把全局锁, scheduler 内维护全局唯一一个 Goroutine 可执行队列\n(1) 锁竞争激烈\n(2) 线程间互相传递可运行的 Goroutine, 引入大量的延迟和额外的开销;\n例子: 比如当 G 中包含创建新协程的时候，M 创建了 G’，为了继续执行 G，需要把 G’交给 M’执行，也造成了很差的局部性，因为 G’和 G 是相关的，最好放在 M 上执行，而不是其他 M’。\n(3) 系统调用(内核态访问文件,设备等)频繁阻塞和解除阻塞线程, 增加了额外的开销;\n(4) 每个线程都需要处理内存缓存，导致大量的内存占用并影响数据局部性;\n例子: 比如当 G 中包含创建新协程的时候，M 创建了 G’，并且对 G’ 进行内存缓存, 换到 M' 运行, M' 又要维护一份 G' 的内存缓存, 创建的 G' 多了, 额外的内存缓存就多了;\n\n## G-M-P 模型 (1.1 至今)\n1. 锁竞争问题\nG-M 模型的性能开销大头就是锁竞争, 所以, 减少锁竞争是头号目标;\nG-M-P 模型, 引入 P(Processor), 每个 P 维护了一个本地可运行 Goroutine 队列(本地 runq), 以及, 绑定了一个 M, 这样, 它就可以从本地 runq 中直接获取下一个 Goroutine 运行, 极大地减少了锁竞争, 缓解了上述问题(1);\n同时, M 新建 G', G' 放入本地 runq, 之后大概率在 M 线程中运行, 不需要额外的给 M' 创建 G' 的内存缓存, 缓解了问题 (2)(4);\n2. 堵塞问题\n引入窃取式调度\n(1) M 的本地 runq 中没有可运行的 Goroutine 了, 窃取其他 M 的本地 runq 或者全局 runq 中的任务, 平衡各个 M 的本地 runq 长度;\n(2) M 被系统调用阻塞, 则解绑 MP, 把 P 给到别的 M', 等到解除阻塞时, 再分配新的 P, 减小阻塞带来的影响;\n3. 为什么引入 P\n在 GOMAXPROCS 个 M 全部被占用的状态下, 需要新建 M 来处理新的 G, 只要 M 不超过阈值就行;\n\n为什么引入 P, 转变为要不要解耦 MP 的问题:\n不解耦: M 堵塞, 则 cpu 被分配到 M‘, 由于 M 上面还有 runq, M‘, M'' 等都可以窃取 M 的 Goroutine;\n解耦: M 堵塞, 则 P 被分配到 M‘, M‘ 运行完当前 Goroutine, 直接从 P 中取 Goroutine, 减少窃取的压力;\n\n## 抢占式调度器 (1.2 至今)\n抢占式调度解决的问题\n(1) 大的 Goroutine 可能占用线程太长时间, 造成其他 Goroutine 的饥饿;\n(2) 垃圾回收 STW, 会造成整个程序的停摆, 需要抢占式调度中断这个过程;\n\n### 基于协作的抢占式调度(1.2 ~ 1.13)\n基于协作的抢占式调度, 在编译阶段, 会给函数插入抢占函数, 在运行时, 调用函数的时候, 会调用抢占函数, 判断函数是否被抢占, 如果是, 则释放 M;\n因为是在函数被调用时判断是否被抢占, 所以, 没有办法及时中断和释放资源, 如果遇到很长的 for 循环或者垃圾回收长时间占用线程, 则是不能及时释放资源的;\n\n### 基于信号的抢占式调度(1.14 至今)\n在程序启动时, 注册信号 SIGURG 和信号处理函数, 在特定时候会触发抢占, 发送 SIGURG 信号; 收到信号的 Goroutine 会被挂起然后退出线程;\n触发信号发送时机:\n(1) go 后台监控 runtime.sysmon 检测超时发送抢占信号;\n(2) go 垃圾回收栈扫描时发送抢占信号;\n(3) go 垃圾回收 STW 时调用 preemptall 发送抢占信号, 暂停所有的 P;\n\n\n\n\n\n","slug":"GMP","published":1,"updated":"2021-08-18T09:43:33.390Z","_id":"ckshb0zij0000nswv71pjfmsi","layout":"post","photos":[],"link":"","content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>GOMAXPROCS: GMP 中 P 的最大数量, 默认值是 cpu 的逻辑核数;<br>CPU 上下文: CPU 寄存器和程序计数器;<br>进程: 操作系统资源分配和调度的基本单位;<br>线程: 操作系统执行运算调度的基本单位;<br>协程: coroutine/fiber 用户空间线程, 由应用程序自主控制的轻量级线程;</p>\n<p>进程上下文切换: 用户态资源(进程的虚拟内存, 栈, 全局变量等资源)切换 和 内核态资源(上下文)切换;<br>线程上下文切换: 用户态资源(线程的栈) 和 内核态资源(上下文);</p>\n<p>一个进程可以拥有多个线程, 这些线程共享进程的内存空间;</p>\n<p>线程各自拥有约 1M 的内存空间, 并且需要切换上下文, 有一定的开销;<br>协程各自拥有约 1K 的内存空间, 因为是应用程序在调度, 所以不需要切换上下文;</p>\n<h1 id=\"GO-调度器\"><a href=\"#GO-调度器\" class=\"headerlink\" title=\"GO 调度器\"></a>GO 调度器</h1><h2 id=\"G-M-模型-1-1-之前\"><a href=\"#G-M-模型-1-1-之前\" class=\"headerlink\" title=\"G-M 模型 (1.1 之前)\"></a>G-M 模型 (1.1 之前)</h2><p>全局就一个 scheduler 和一把全局锁, scheduler 内维护全局唯一一个 Goroutine 可执行队列<br>(1) 锁竞争激烈<br>(2) 线程间互相传递可运行的 Goroutine, 引入大量的延迟和额外的开销;<br>例子: 比如当 G 中包含创建新协程的时候，M 创建了 G’，为了继续执行 G，需要把 G’交给 M’执行，也造成了很差的局部性，因为 G’和 G 是相关的，最好放在 M 上执行，而不是其他 M’。<br>(3) 系统调用(内核态访问文件,设备等)频繁阻塞和解除阻塞线程, 增加了额外的开销;<br>(4) 每个线程都需要处理内存缓存，导致大量的内存占用并影响数据局部性;<br>例子: 比如当 G 中包含创建新协程的时候，M 创建了 G’，并且对 G’ 进行内存缓存, 换到 M’ 运行, M’ 又要维护一份 G’ 的内存缓存, 创建的 G’ 多了, 额外的内存缓存就多了;</p>\n<h2 id=\"G-M-P-模型-1-1-至今\"><a href=\"#G-M-P-模型-1-1-至今\" class=\"headerlink\" title=\"G-M-P 模型 (1.1 至今)\"></a>G-M-P 模型 (1.1 至今)</h2><ol>\n<li>锁竞争问题<br>G-M 模型的性能开销大头就是锁竞争, 所以, 减少锁竞争是头号目标;<br>G-M-P 模型, 引入 P(Processor), 每个 P 维护了一个本地可运行 Goroutine 队列(本地 runq), 以及, 绑定了一个 M, 这样, 它就可以从本地 runq 中直接获取下一个 Goroutine 运行, 极大地减少了锁竞争, 缓解了上述问题(1);<br>同时, M 新建 G’, G’ 放入本地 runq, 之后大概率在 M 线程中运行, 不需要额外的给 M’ 创建 G’ 的内存缓存, 缓解了问题 (2)(4);</li>\n<li>堵塞问题<br>引入窃取式调度<br>(1) M 的本地 runq 中没有可运行的 Goroutine 了, 窃取其他 M 的本地 runq 或者全局 runq 中的任务, 平衡各个 M 的本地 runq 长度;<br>(2) M 被系统调用阻塞, 则解绑 MP, 把 P 给到别的 M’, 等到解除阻塞时, 再分配新的 P, 减小阻塞带来的影响;</li>\n<li>为什么引入 P<br>在 GOMAXPROCS 个 M 全部被占用的状态下, 需要新建 M 来处理新的 G, 只要 M 不超过阈值就行;</li>\n</ol>\n<p>为什么引入 P, 转变为要不要解耦 MP 的问题:<br>不解耦: M 堵塞, 则 cpu 被分配到 M‘, 由于 M 上面还有 runq, M‘, M’’ 等都可以窃取 M 的 Goroutine;<br>解耦: M 堵塞, 则 P 被分配到 M‘, M‘ 运行完当前 Goroutine, 直接从 P 中取 Goroutine, 减少窃取的压力;</p>\n<h2 id=\"抢占式调度器-1-2-至今\"><a href=\"#抢占式调度器-1-2-至今\" class=\"headerlink\" title=\"抢占式调度器 (1.2 至今)\"></a>抢占式调度器 (1.2 至今)</h2><p>抢占式调度解决的问题<br>(1) 大的 Goroutine 可能占用线程太长时间, 造成其他 Goroutine 的饥饿;<br>(2) 垃圾回收 STW, 会造成整个程序的停摆, 需要抢占式调度中断这个过程;</p>\n<h3 id=\"基于协作的抢占式调度-1-2-1-13\"><a href=\"#基于协作的抢占式调度-1-2-1-13\" class=\"headerlink\" title=\"基于协作的抢占式调度(1.2 ~ 1.13)\"></a>基于协作的抢占式调度(1.2 ~ 1.13)</h3><p>基于协作的抢占式调度, 在编译阶段, 会给函数插入抢占函数, 在运行时, 调用函数的时候, 会调用抢占函数, 判断函数是否被抢占, 如果是, 则释放 M;<br>因为是在函数被调用时判断是否被抢占, 所以, 没有办法及时中断和释放资源, 如果遇到很长的 for 循环或者垃圾回收长时间占用线程, 则是不能及时释放资源的;</p>\n<h3 id=\"基于信号的抢占式调度-1-14-至今\"><a href=\"#基于信号的抢占式调度-1-14-至今\" class=\"headerlink\" title=\"基于信号的抢占式调度(1.14 至今)\"></a>基于信号的抢占式调度(1.14 至今)</h3><p>在程序启动时, 注册信号 SIGURG 和信号处理函数, 在特定时候会触发抢占, 发送 SIGURG 信号; 收到信号的 Goroutine 会被挂起然后退出线程;<br>触发信号发送时机:<br>(1) go 后台监控 runtime.sysmon 检测超时发送抢占信号;<br>(2) go 垃圾回收栈扫描时发送抢占信号;<br>(3) go 垃圾回收 STW 时调用 preemptall 发送抢占信号, 暂停所有的 P;</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>GOMAXPROCS: GMP 中 P 的最大数量, 默认值是 cpu 的逻辑核数;<br>CPU 上下文: CPU 寄存器和程序计数器;<br>进程: 操作系统资源分配和调度的基本单位;<br>线程: 操作系统执行运算调度的基本单位;<br>协程: coroutine/fiber 用户空间线程, 由应用程序自主控制的轻量级线程;</p>\n<p>进程上下文切换: 用户态资源(进程的虚拟内存, 栈, 全局变量等资源)切换 和 内核态资源(上下文)切换;<br>线程上下文切换: 用户态资源(线程的栈) 和 内核态资源(上下文);</p>\n<p>一个进程可以拥有多个线程, 这些线程共享进程的内存空间;</p>\n<p>线程各自拥有约 1M 的内存空间, 并且需要切换上下文, 有一定的开销;<br>协程各自拥有约 1K 的内存空间, 因为是应用程序在调度, 所以不需要切换上下文;</p>\n<h1 id=\"GO-调度器\"><a href=\"#GO-调度器\" class=\"headerlink\" title=\"GO 调度器\"></a>GO 调度器</h1><h2 id=\"G-M-模型-1-1-之前\"><a href=\"#G-M-模型-1-1-之前\" class=\"headerlink\" title=\"G-M 模型 (1.1 之前)\"></a>G-M 模型 (1.1 之前)</h2><p>全局就一个 scheduler 和一把全局锁, scheduler 内维护全局唯一一个 Goroutine 可执行队列<br>(1) 锁竞争激烈<br>(2) 线程间互相传递可运行的 Goroutine, 引入大量的延迟和额外的开销;<br>例子: 比如当 G 中包含创建新协程的时候，M 创建了 G’，为了继续执行 G，需要把 G’交给 M’执行，也造成了很差的局部性，因为 G’和 G 是相关的，最好放在 M 上执行，而不是其他 M’。<br>(3) 系统调用(内核态访问文件,设备等)频繁阻塞和解除阻塞线程, 增加了额外的开销;<br>(4) 每个线程都需要处理内存缓存，导致大量的内存占用并影响数据局部性;<br>例子: 比如当 G 中包含创建新协程的时候，M 创建了 G’，并且对 G’ 进行内存缓存, 换到 M’ 运行, M’ 又要维护一份 G’ 的内存缓存, 创建的 G’ 多了, 额外的内存缓存就多了;</p>\n<h2 id=\"G-M-P-模型-1-1-至今\"><a href=\"#G-M-P-模型-1-1-至今\" class=\"headerlink\" title=\"G-M-P 模型 (1.1 至今)\"></a>G-M-P 模型 (1.1 至今)</h2><ol>\n<li>锁竞争问题<br>G-M 模型的性能开销大头就是锁竞争, 所以, 减少锁竞争是头号目标;<br>G-M-P 模型, 引入 P(Processor), 每个 P 维护了一个本地可运行 Goroutine 队列(本地 runq), 以及, 绑定了一个 M, 这样, 它就可以从本地 runq 中直接获取下一个 Goroutine 运行, 极大地减少了锁竞争, 缓解了上述问题(1);<br>同时, M 新建 G’, G’ 放入本地 runq, 之后大概率在 M 线程中运行, 不需要额外的给 M’ 创建 G’ 的内存缓存, 缓解了问题 (2)(4);</li>\n<li>堵塞问题<br>引入窃取式调度<br>(1) M 的本地 runq 中没有可运行的 Goroutine 了, 窃取其他 M 的本地 runq 或者全局 runq 中的任务, 平衡各个 M 的本地 runq 长度;<br>(2) M 被系统调用阻塞, 则解绑 MP, 把 P 给到别的 M’, 等到解除阻塞时, 再分配新的 P, 减小阻塞带来的影响;</li>\n<li>为什么引入 P<br>在 GOMAXPROCS 个 M 全部被占用的状态下, 需要新建 M 来处理新的 G, 只要 M 不超过阈值就行;</li>\n</ol>\n<p>为什么引入 P, 转变为要不要解耦 MP 的问题:<br>不解耦: M 堵塞, 则 cpu 被分配到 M‘, 由于 M 上面还有 runq, M‘, M’’ 等都可以窃取 M 的 Goroutine;<br>解耦: M 堵塞, 则 P 被分配到 M‘, M‘ 运行完当前 Goroutine, 直接从 P 中取 Goroutine, 减少窃取的压力;</p>\n<h2 id=\"抢占式调度器-1-2-至今\"><a href=\"#抢占式调度器-1-2-至今\" class=\"headerlink\" title=\"抢占式调度器 (1.2 至今)\"></a>抢占式调度器 (1.2 至今)</h2><p>抢占式调度解决的问题<br>(1) 大的 Goroutine 可能占用线程太长时间, 造成其他 Goroutine 的饥饿;<br>(2) 垃圾回收 STW, 会造成整个程序的停摆, 需要抢占式调度中断这个过程;</p>\n<h3 id=\"基于协作的抢占式调度-1-2-1-13\"><a href=\"#基于协作的抢占式调度-1-2-1-13\" class=\"headerlink\" title=\"基于协作的抢占式调度(1.2 ~ 1.13)\"></a>基于协作的抢占式调度(1.2 ~ 1.13)</h3><p>基于协作的抢占式调度, 在编译阶段, 会给函数插入抢占函数, 在运行时, 调用函数的时候, 会调用抢占函数, 判断函数是否被抢占, 如果是, 则释放 M;<br>因为是在函数被调用时判断是否被抢占, 所以, 没有办法及时中断和释放资源, 如果遇到很长的 for 循环或者垃圾回收长时间占用线程, 则是不能及时释放资源的;</p>\n<h3 id=\"基于信号的抢占式调度-1-14-至今\"><a href=\"#基于信号的抢占式调度-1-14-至今\" class=\"headerlink\" title=\"基于信号的抢占式调度(1.14 至今)\"></a>基于信号的抢占式调度(1.14 至今)</h3><p>在程序启动时, 注册信号 SIGURG 和信号处理函数, 在特定时候会触发抢占, 发送 SIGURG 信号; 收到信号的 Goroutine 会被挂起然后退出线程;<br>触发信号发送时机:<br>(1) go 后台监控 runtime.sysmon 检测超时发送抢占信号;<br>(2) go 垃圾回收栈扫描时发送抢占信号;<br>(3) go 垃圾回收 STW 时调用 preemptall 发送抢占信号, 暂停所有的 P;</p>\n"}],"PostAsset":[{"_id":"source/_posts/GO-LOCK/mutex_state.png","slug":"mutex_state.png","post":"ckqfvu19200016swvc31n37xt","modified":0,"renderable":0},{"_id":"source/_posts/GO-LOCK/1_core_cpu.png","slug":"1_core_cpu.png","post":"ckqfvu19200016swvc31n37xt","modified":0,"renderable":0},{"_id":"source/_posts/GO-LOCK/lock.png","slug":"lock.png","post":"ckqfvu19200016swvc31n37xt","modified":0,"renderable":0},{"_id":"source/_posts/GO-LOCK/lock_sch.png","slug":"lock_sch.png","post":"ckqfvu19200016swvc31n37xt","modified":0,"renderable":0},{"_id":"source/_posts/mysql/mysql_structure.png","slug":"mysql_structure.png","post":"ckqxdbzph0000iywvdtmyemel","modified":0,"renderable":0},{"_id":"source/_posts/mysql/redo_log.png","slug":"redo_log.png","post":"ckqxdbzph0000iywvdtmyemel","modified":0,"renderable":0},{"_id":"source/_posts/mysql/update语句执行过程.png","slug":"update语句执行过程.png","post":"ckqxdbzph0000iywvdtmyemel","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckp6ku2il0000aewvdnjh6ihx","category_id":"ckp6ku2ir0001aewvf22wdpgq","_id":"ckp6ku2iu0004aewvbsfk1eyn"},{"post_id":"ckqfvu19200016swvc31n37xt","category_id":"ckqfvu19300026swv1ucddvua","_id":"ckqfvu19a00096swv2wj63epa"},{"post_id":"ckqxdbzph0000iywvdtmyemel","category_id":"ckqxdctvx0001iywv3zgyaoj1","_id":"ckqxdctvy0004iywvbdp2380t"},{"post_id":"ckshb0zij0000nswv71pjfmsi","category_id":"ckqfvu19300026swv1ucddvua","_id":"ckshb2eh50006nswveanh16av"}],"PostTag":[{"post_id":"ckp6ku2il0000aewvdnjh6ihx","tag_id":"ckp6u2zn80000a0wv1hlfam8s","_id":"ckp6u2zna0003a0wv0bgfeer6"},{"post_id":"ckp6ku2il0000aewvdnjh6ihx","tag_id":"ckp6u2zn90001a0wvd6iz09c2","_id":"ckp6u2zna0004a0wv79y7gztl"},{"post_id":"ckp6ku2il0000aewvdnjh6ihx","tag_id":"ckp6ukk0r0006a0wv0u3u4iqo","_id":"ckp6ukk0s0007a0wv6iobhxnf"},{"post_id":"ckqfvu19200016swvc31n37xt","tag_id":"ckqfvu19700056swvgtga9rli","_id":"ckqfvu19900086swv6ph425yd"},{"post_id":"ckqxdbzph0000iywvdtmyemel","tag_id":"ckqxdctvx0002iywv21a1ea4t","_id":"ckqxdctvy0003iywv6kl79gf5"},{"post_id":"ckshb0zij0000nswv71pjfmsi","tag_id":"ckshb2eh40005nswv8ck6djm6","_id":"ckshb2eh60007nswv9tvp5neh"}],"Tag":[{"name":"Scheduler","_id":"ckp6ku2it0002aewvduss3zxn"},{"name":"Source Code","_id":"ckp6ku2it0003aewv2j5v0ls6"},{"name":"调度器","_id":"ckp6u2zn80000a0wv1hlfam8s"},{"name":"源码解析","_id":"ckp6u2zn90001a0wvd6iz09c2"},{"name":"系统控制精要","_id":"ckp6u2zna0002a0wvawnzdf7c"},{"name":"draveness","_id":"ckp6ukk0r0006a0wv0u3u4iqo"},{"name":"GO环境变量","_id":"ckqfvu19500036swv47az5alh"},{"name":"GO源码解析","_id":"ckqfvu19700056swvgtga9rli"},{"name":"mysql","_id":"ckqxdctvx0002iywv21a1ea4t"},{"name":"go","_id":"ckshb0zin0002nswv73yvbwvq"},{"name":"GO","_id":"ckshb2eh40005nswv8ck6djm6"}]}}